using StudentProgressTracker.Shared.Ids;

namespace StudentProgressTracker.Domain.Common;

public abstract class Auditable
{
    /// <summary>
    ///     the entity entry creation date
    /// </summary>
    public DateTime CreationDate { get; protected set; }

    /// <summary>
    ///     who's create this record, default value is empty string
    /// </summary>
    public string CreatedByName { get; protected set; } = string.Empty;

    /// <summary>
    ///     the id of the creator
    /// </summary>
    public UserId CreatedById { get; protected set; } = UserId.Empty;

    /// <summary>
    ///     the date of last modification over this entry
    /// </summary>
    public DateTime? ModificationDate { get; protected set; }

    /// <summary>
    ///     who's modify this entry
    /// </summary>
    public string? ModifiedByName { get; protected set; }

    /// <summary>
    ///     the id of modifier
    /// </summary>
    public UserId? ModifiedById { get; protected set; }

    /// <summary>
    ///     is the instance is active or not also this will reflect into inactivation date.
    /// </summary>
    public bool? IsActive => InactiveDate == null;

    /// <summary>
    ///     the instance inactivation date
    /// </summary>
    public DateTime? InactiveDate { get; protected set; }

    /// <summary>
    /// a sequential number auto generated by sequence in sql.
    /// </summary>
    public int SerialNumber { get; protected set; }

    /// <summary>
    ///     set the creator user id.
    /// </summary>
    /// <param name="createdById"></param>
    public void SetCreatedById(UserId createdById)
    {
        CreatedById = createdById;
    }

    /// <summary>
    ///     set the creator username
    /// </summary>
    /// <param name="createdByName"></param>
    public void SetCreatedByName(string createdByName)
    {
        CreatedByName = createdByName;
    }

    /// <summary>
    ///     set the creation date.
    /// </summary>
    /// <param name="creationDateTime"></param>
    public void SetCreationDate(DateTime creationDateTime)
    {
        CreationDate = creationDateTime;
    }

    /// <summary>
    ///     set the modifier by user id.
    /// </summary>
    /// <param name="modifiedById"></param>
    public void SetModifiedById(UserId modifiedById)
    {
        ModifiedById = modifiedById;
    }

    /// <summary>
    ///     set the modifier username.
    /// </summary>
    /// <param name="modifiedByName"></param>
    public void SetModifiedByName(string modifiedByName)
    {
        ModifiedByName = modifiedByName;
    }

    /// <summary>
    ///     set the instance modification date.
    /// </summary>
    /// <param name="modificationDate"></param>
    public void SetModificationDate(DateTime modificationDate)
    {
        ModificationDate = modificationDate;
    }

    /// <summary>
    ///     toggle the instance activation state and this will reflect into the instance inactive date.
    /// </summary>
    /// <param name="isActive"></param>
    public virtual void SetIsActive(bool isActive)
    {
        InactiveDate = isActive ? null : DateTime.UtcNow;
    }

    /// <summary>
    ///     set the inactivation date.
    /// </summary>
    /// <param name="inactiveDate"></param>
    public virtual void SetInactiveDate(DateTime? inactiveDate)
    {
        if (inactiveDate is null)
            InactiveDate = null;

        InactiveDate = inactiveDate;
    }

    /// <summary>
    ///     set the inactivation date.
    /// </summary>
    /// <param name="inactiveDate"></param>
    public virtual void SetInactiveDate(DateTime inactiveDate)
    {
        InactiveDate = inactiveDate;
    }

    /// <summary>
    ///     Removes the inactivation date.
    /// </summary>
    public virtual void RemoveInactivationDate()
    {
        InactiveDate = null;
    }

    /// <summary>
    ///     get activation status from inactivation date.
    /// </summary>
    public virtual bool MapActivationStatusFromInactivationDate()
    {
        return !InactiveDate.HasValue || InactiveDate.Value.Date > DateTime.UtcNow.Date;
    }
}
